---
- name: Perform setup
  ansible.builtin.include_tasks: setup.yml

- name: Create network
  docker_network:
    name: net-{{ network_shortname }}

- name: Announce update
  ignore_errors: true
  rcon:
    address: "{{ ansible_host }}"
    port: "{{ item.port }}"
    password: "{{ item.secrets.rcon_pass }}"
    command: 'sm_csay Server is restarting for updates.;sm_say Server is restarting for updates.'
  loop: "{{ targets.instances }}"
  loop_control:
    index_var: loop0
  delegate_to: localhost
  timeout: 10

- name: Start ssh tunnel
  community.docker.docker_container:
    name: "ssh-{{ network_shortname }}"
    image: "kroniak/ssh-client"
    state: started
    restart: true
    restart_policy: "always"
    volumes:
      - /home/tf2server/.ssh/sbpp_key_{{ network_shortname }}:/root/id_rsa
    networks:
      - name: net-{{ network_shortname }}
    command: ssh -4NTCp {{ sbpp_host_ssh_port }} -i /root/id_rsa -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o ExitOnForwardFailure=yes -L 0.0.0.0:3306:db:3306 sbpp_user@{{ sbpp_host }}

- name: Start SRCDS
  community.docker.docker_container:
    name: "srcds-{{network_shortname}}-{{ item.name }}"
    image: "srcds-{{network_shortname}}-{{ item.name }}:latest"
    state: started
    restart: true
    restart_policy: "unless-stopped"
    cpuset_cpus: "{{ loop0 }}"
    networks:
      - name: net-{{ network_shortname }}
    ports:
      - "{{ item.port }}:{{ item.port }}"
      - "{{ item.port }}:{{ item.port }}/udp"
      - "{{ item.port + 5 }}:{{ item.port + 5 }}/udp"
  loop: "{{ targets.instances }}"
  loop_control:
    index_var: loop0

- name: Generate cronjob
  set_fact:
    cron: |
      docker restart {% for item in instances %}
      srcds-{{ network_shortname }}-{{ item.name }} {% endfor %}

- name: Install cronjob
  ansible.builtin.cron:
    name: "srcds-restart-{{ network_shortname }}"
    weekday: "*"
    minute: "0"
    hour: "{{ daily_restart_hour_utc }}"
    job: "{{ cron }}"
  when: ansible_distribution == 'Ubuntu'
